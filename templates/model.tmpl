{{ define "model" }}
	{{ $name := .Name }}
	{{ $table := .Table }}
	{{ $fieldNames := .FieldNames }}
	{{ $hasDeletedAt := .HasDeletedAt }}
	{{ $hasCreatedAt := .HasCreatedAt }}
	{{ $hasID := .HasID }}
	{{ $fields := .Fields }}

	// Create{{ $name }} creates a new instance of {{ $name }}.
	func Create{{ $name }}(value *{{ $name }}) *{{ $name }} {
		{{- if $hasCreatedAt -}}
		if value.CreatedAt.IsZero() {
			{{- if .HasNullableCreatedAt -}}
				value.CreatedAt = N(Now())
			{{ else }}
				value.CreatedAt = Now()
			{{- end }}
		}
		{{ end -}}
		{{ if $hasID }}result{{ else }}_{{ end }}, err := Exec("insert into `{{ $table.Name }}` ({{ $fieldNames }}) values ({{ .Placeholders }})",
			{{- range $fields }}
				value.{{ .Name }},
			{{- end }}
		)
		if err != nil {
			handleError(err)
			return nil
		}
		{{ if $hasID }}
			lastInsertID, err := result.LastInsertId()
			if err != nil {
				handleError(err)
				return nil
			}
			value.ID = lastInsertID
		{{ end }}
		return value
	}

	{{ if $hasID }}
		// Find{{ $name }} finds a non-deleted instance of {{ $name }} by ID.
		func Find{{ $name }}[T Integer | ~string](id T) (*{{ $name }}, bool) {
			row := QueryRow("select {{ $fieldNames }} from `{{ $table.Name }}` where id = ?{{ if $hasDeletedAt }} and deleted_at is null{{ end }}", id)
			item := new({{ $name }})
			err := row.Scan(
				{{- range $fields }}
					&item.{{ .Name }},
				{{- end }}
			)
			if err == sql.ErrNoRows {
				return nil, false
			}
			if err != nil {
				handleError(err)
				return nil, false
			}
			return item, true
		}

		// Find{{ $name }} finds an instance (including deleted) of {{ $name }} by ID.
		func Find{{ $name }}Unscoped[T Integer | ~string](id T) (*{{ $name }}, bool) {
			row := QueryRow("select {{ $fieldNames }} from `{{ $table.Name }}` where id = ?", id)
			item := new({{ $name }})
			err := row.Scan(
				{{- range $fields }}
					&item.{{ .Name }},
				{{- end }}
			)
			if err == sql.ErrNoRows {
				return nil, false
			}
			if err != nil {
				handleError(err)
				return nil, false
			}
			return item, true
		}
	{{ end }}

	// Find{{ $name }}s finds all non-deleted instances of {{ $name }}.
	func Find{{ $name }}s() []*{{ $name }} {
		rows, err := Query("select {{ $fieldNames }} from `{{ $table.Name }}`{{ if $hasDeletedAt }} where deleted_at is null{{ end }} order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc")
		if err != nil {
			handleError(err)
			return nil
		}
		defer rows.Close()
		var items []*{{ $name }}
		for rows.Next() {
			item := new({{ $name }})
			if err := rows.Scan(
				{{- range $fields }}
					&item.{{ .Name }},
				{{- end }}
			); err != nil {
				handleError(err)
				return nil
			}
			items = append(items, item)
		}
		if err := rows.Close(); err != nil {
			handleError(err)
			return nil
		}
		if err := rows.Err(); err != nil {
			handleError(err)
			return nil
		}
		return items
	}

	{{ if $hasID }}
		// Reload reloads this instance of {{ $name }}.
		func (self *{{ $name }}) Reload() {
			if s, found := Find{{ $name }}(self.ID); found {
				*self = *s
			}
		}
	{{ end }}

	{{ if $hasDeletedAt }}
		// Find{{ $name }}sUnscoped finds all instances (including deleted) of {{ $name }}.
		func Find{{ $name }}sUnscoped() []*{{ $name }} {
			rows, err := Query("select {{ $fieldNames }} from `{{ $table.Name }}` order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc")
			if err != nil {
				handleError(err)
				return nil
			}
			defer rows.Close()
			var items []*{{ $name }}
			for rows.Next() {
				item := new({{ $name }})
				if err := rows.Scan(
					{{- range $fields }}
						&item.{{ .Name }},
					{{- end }}
				); err != nil {
					handleError(err)
					return nil
				}
				items = append(items, item)
			}
			if err := rows.Close(); err != nil {
				handleError(err)
				return nil
			}
			if err := rows.Err(); err != nil {
				handleError(err)
				return nil
			}
			return items
		}

		{{ if $hasID }}
			// Delete soft deletes this instance of {{ $name }}.
			func (self *{{ $name }}) Delete() bool {
				result, err := Exec("update `{{ $table.Name }}` set deleted_at = ? where id = ?", Now(), self.ID)
				if err != nil {
					handleError(err)
					return false
				}
				rowsAffected, err := result.RowsAffected()
				if err != nil {
					handleError(err)
					return false
				}
				return rowsAffected > 0
			}

			// Restore restores this instance of {{ $name }}.
			func (self *{{ $name }}) Restore() bool {
				result, err := Exec("update `{{ $table.Name }}` set deleted_at = null where id = ?", self.ID)
				if err != nil {
					handleError(err)
					return false
				}
				rowsAffected, err := result.RowsAffected()
				if err != nil {
					handleError(err)
					return false
				}
				return rowsAffected > 0
			}

			// HardDelete hard deletes (i.e. DELETE) this instance of {{ $name }}.
			func (self *{{ $name }}) HardDelete() bool {
				result, err := Exec("delete from `{{ $table.Name }}` where id = ?", self.ID)
				if err != nil {
					handleError(err)
					return false
				}
				rowsAffected, err := result.RowsAffected()
				if err != nil {
					handleError(err)
					return false
				}
				return rowsAffected > 0
			}
		{{ end }}
	{{ end }}

	{{ range $fields }}
		{{ if and (ne .Name "ID") (ne .Name "DeletedAt") (ne .Name "CreatedAt") }}
			// Find{{ $name }}sBy{{ .Name }} finds all non-deleted instances of {{ $name }} by {{ .Name }}.
			func Find{{ $name }}sBy{{ .Name }}(value {{ .Type }}) []*{{ $name }} {
				var rows *sql.Rows
				var err error
				{{- if .Nullable }}
					if value.Valid {
						rows, err = Query("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` = ?{{ if $hasDeletedAt }} and deleted_at is null{{ end }} order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc", value)
					} else {
						rows, err = Query("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` is null{{ if $hasDeletedAt }} and deleted_at is null{{ end }} order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc")
					}
				{{ else }}
					rows, err = Query("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` = ?{{ if $hasDeletedAt }} AND deleted_at IS NULL{{ end }} order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc", value)
				{{ end -}}
				if err != nil {
					handleError(err)
					return nil
				}
				defer rows.Close()
				var items []*{{ $name }}
				for rows.Next() {
					item := new({{ $name }})
					if err := rows.Scan(
						{{- range $fields }}
							&item.{{ .Name }},
						{{- end }}
					); err != nil {
						handleError(err)
						return nil
					}
					items = append(items, item)
				}
				if err := rows.Close(); err != nil {
					handleError(err)
					return nil
				}
				if err := rows.Err(); err != nil {
					handleError(err)
					return nil
				}
				return items
			}

			{{ if $hasDeletedAt }}
				// Find{{ $name }}sBy{{ .Name }}Unscoped finds all instances (including deleted) of {{ $name }} by {{ .Name }}.
				func Find{{ $name }}sBy{{ .Name }}Unscoped(value {{ .Type }}) []*{{ $name }} {
					var rows *sql.Rows
					var err error
					{{- if .Nullable }}
						if value.Valid {
							rows, err = Query("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` = ? order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc", value)
						} else {
							rows, err = Query("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` is null order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc")
						}
					{{ else }}
						rows, err = Query("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` = ? order by {{ if $hasID }}id{{ else if $hasCreatedAt }}created_at{{ else }}`{{ (index $fields 0).Column.Name }}`{{ end }} asc", value)
					{{ end -}}
					if err != nil {
						handleError(err)
						return nil
					}
					defer rows.Close()
					var items []*{{ $name }}
					for rows.Next() {
						item := new({{ $name }})
						if err := rows.Scan(
							{{- range $fields }}
								&item.{{ .Name }},
							{{- end }}
						); err != nil {
							handleError(err)
							return nil
						}
						items = append(items, item)
					}
					if err := rows.Close(); err != nil {
						handleError(err)
						return nil
					}
					if err := rows.Err(); err != nil {
						handleError(err)
						return nil
					}
					return items
				}
			{{ end }}

			// Find{{ $name }}By{{ .Name }} finds an instance of {{ $name }} by {{ .Name }}.
			func Find{{ $name }}By{{ .Name }}(value {{ .BaseType }}) (*{{ $name }}, bool) {
				row := QueryRow("select {{ $fieldNames }} from `{{ $table.Name }}` where `{{ .Tags.column }}` = ?{{ if $hasDeletedAt }} AND deleted_at IS NULL{{ end }}", value)
				item := new({{ $name }})
				err := row.Scan(
					{{- range $fields }}
						&item.{{ .Name }},
					{{- end }}
				)
				if err == sql.ErrNoRows {
					return item, false
				}
				if err != nil {
					handleError(err)
					return nil, false
				}
				return item, true
			}

			{{ if $hasID }}
				// Update{{ .Name }} updates the {{ .Name }} field.
				func (self *{{ $name }}) Update{{ .Name }}(value {{ .BaseType }}) bool {
					result, err := Exec("update `{{ $table.Name }}` set `{{ .Tags.column }}` = ? where id = ?", value, self.ID)
					if err != nil {
						handleError(err)
						return false
					}
					rowsAffected, err := result.RowsAffected()
					if err != nil {
						handleError(err)
						return false
					}
					{{- if .Nullable }}
						self.{{ .Name }} = sql.Null[{{ .BaseType }}]{V: value, Valid: true}
					{{ else }}
						self.{{ .Name }} = value
					{{ end -}}
					return rowsAffected > 0
				}
			{{ end }}

			{{ if (and .Nullable $hasID) }}
				// Clear{{ .Name }} sets the {{ .Name }} field to NULL.
				func (self *{{ $name }}) Clear{{ .Name }}() bool {
					result, err := Exec("update `{{ $table.Name }}` set `{{ .Tags.column }}` = null where id = ?", self.ID)
					if err != nil {
						handleError(err)
						return false
					}
					rowsAffected, err := result.RowsAffected()
					if err != nil {
						handleError(err)
						return false
					}
					self.{{ .Name }} = sql.Null[{{ .BaseType }}]{}
					return rowsAffected > 0
				}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
