{{ define "queries" }}
	{{ range .Queries }}
		// {{ .Command }}
		const {{ .ConstantName }} = `
{{escape .SQL }}
`

		{{ if .Argument.EmitStruct }}
			type {{ .Argument.Type }} struct {
				{{- range .Argument.UniqueFields }}
					{{ .Name }} {{ .Type }} {{ if .Tag }}`{{ .Tag }}`{{ end }}
				{{- end }}
			}
		{{ end }}

		{{ if .ReturnValue.EmitStruct }}
			type {{ .ReturnValue.Type }} struct {
				{{- range .ReturnValue.Struct.Fields }}
					{{ .Name }} {{ .Type }} {{ if .Tag }}`{{ .Tag }}`{{ end }}
				{{- end }}
			}
		{{ end }}

		{{ if eq .Command ":one" }}
			{{ template "comments" .Comments -}}
			{{ if and (eq .ReturnValue.Name "count") (eq .ReturnValue.Typ "int64") }}
				func {{ .MethodName }}({{ .Argument.Pair }}) int64 {
					{{- template "exec" . }}
					{{- if or (ne .Argument.Pair .ReturnValue.Pair) (ne .Argument.DefineType .ReturnValue.DefineType) }}
						var {{ .ReturnValue.ReturnName }} {{ .ReturnValue.Type }}
					{{- end }}
					err := row.Scan({{ .ReturnValue.Scan }})
					if err == sql.ErrNoRows {
						return 0
					}
					if err != nil {
						handleError(err)
					}
					return {{ .ReturnValue.ReturnName }}
				}
			{{ else }}
				func {{ .MethodName }}({{ .Argument.Pair }}) ({{ if .ReturnValue.Pointer }}*{{ end }}{{ .ReturnValue.DefineType }}, bool) {
					{{- template "exec" . }}
					{{- if or (ne .Argument.Pair .ReturnValue.Pair) (ne .Argument.DefineType .ReturnValue.DefineType) }}
						{{- if .ReturnValue.Pointer }}
							{{ .ReturnValue.ReturnName }} := new({{ .ReturnValue.Type }})
						{{ else }}
							var {{ .ReturnValue.ReturnName }} {{ .ReturnValue.Type }}
						{{- end }}
					{{- end }}
					err := row.Scan({{ .ReturnValue.Scan }})
					if err == sql.ErrNoRows {
						return {{ .ReturnValue.ReturnName }}, false
					}
					if err != nil {
						handleError(err)
					}
					return {{ .ReturnValue.ReturnName }}, true
				}
			{{ end }}
		{{ end }}

		{{ if eq .Command ":many" }}
			{{ template "comments" .Comments -}}
			func {{ .MethodName }}({{ .Argument.Pair }}) ([]{{ if .ReturnValue.Pointer }}*{{ end }}{{ .ReturnValue.DefineType }}) {
				{{- template "exec" . }}
				if err != nil {
					handleError(err)
				}
				defer rows.Close()
				var items []{{ if .ReturnValue.Pointer }}*{{ end }}{{ .ReturnValue.DefineType }}
				for rows.Next() {
					{{- if .ReturnValue.Pointer }}
						{{ .ReturnValue.ReturnName }} := new({{ .ReturnValue.Type }})
					{{ else }}
						var {{ .ReturnValue.ReturnName }} {{ .ReturnValue.Type }}
					{{- end }}
					if err := rows.Scan({{ .ReturnValue.Scan }}); err != nil {
						handleError(err)
					}
					items = append(items, {{ .ReturnValue.ReturnName }})
				}
				if err := rows.Close(); err != nil {
					handleError(err)
				}
				if err := rows.Err(); err != nil {
					handleError(err)
				}
				return items
			}
		{{ end }}

		{{ if eq .Command ":exec" }}
			{{ template "comments" .Comments -}}
			func {{ .MethodName }}({{ .Argument.Pair }}) {
				{{- template "exec" . }}
				if err != nil {
					handleError(err)
				}
			}
		{{ end }}

		{{ if eq .Command ":execrows" }}
			{{ template "comments" .Comments -}}
			func {{ .MethodName }}({{ .Argument.Pair }}) (int) {
				{{- template "exec" . }}
				if err != nil {
					handleError(err)
				}
				if rowsAffected, err := result.RowsAffected(); err != nil {
					handleError(err)
				} else {
					return rowsAffected
				}
			}
		{{ end }}

		{{ if eq .Command ":execlastid" }}
			{{ template "comments" .Comments -}}
			func {{ .MethodName }}({{ .Argument.Pair }}) (int) {
				{{- template "exec" . }}
				if err != nil {
					handleError(err)
				}
				if lastInsertID, err := result.LastInsertId(); err != nil {
					handleError(err)
				} else {
					return lastInsertID
				}
			}
		{{ end }}

		{{ if eq .Command ":execresult" }}
			{{ template "comments" .Comments -}}
			func {{ .MethodName }}({{ .Argument.Pair }}) (sql.Result) {
				{{- template "exec" . }}
				if err != nil {
					handleError(err)
				}
				return result
			}
		{{ end }}
	{{ end }}
{{ end }}
