// -*- go -*-
{{ define "migrate" }}
	type Migration struct {
		Name string
		SQL  string
	}

	func migrate(dsn *DSN) error {
		connection, err := config.Open(dsn)
		if err != nil {
			return err
		}
		defer connection.Close()

		_, err = connection.Exec(`
			create table if not exists migrations (
				name varchar(512) not null primary key,
				migrated_at datetime not null
			)
		`)
		if err != nil {
			return err
		}

		rows, err := connection.Query("select name from migrations")
		if err != nil {
			return err
		}

		ran := map[string]bool{}
		for rows.Next() {
			var id string
			if err := rows.Scan(&id); err != nil {
				return err
			}
			ran[id] = true
		}

		for _, migration := range config.Migrations {
			if ran[migration.Name] {
				continue
			}

			sql := strings.TrimSpace(migration.SQL)

			if config.EnableLogger {
				if sql == "" {
					log.Printf("\033[33mSkipping empty migration %s\033[0m", migration.Name)
				} else {
					log.Printf("\033[33mRunning migration %s\033[0m", migration.Name)
				}
			}

			if sql == "" {
				continue
			}

			_, err = connection.Exec(sql)
			if err != nil {
				return fmt.Errorf("%s: %w", migration.Name, err)
			}

			_, err = connection.Exec(
				"insert into migrations (name, migrated_at) values (?, ?)",
				migration.Name,
				time.Now().UTC(),
			)
			if err != nil {
				return err
			}
		}

		return nil
	}
{{ end }}
